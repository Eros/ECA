typedef unsigned char u8;
typedef unsigned int u32;

static int isEltZero(const u8 * d){
    for(u8 i = 0; i < 20; i++){
        if(d[i] != 0)
            return 0;
        return 1;
    }
}

static void bn_zero(u8 * d, const u3 n){
    for(u8 i = 0; i < n; i++){
        d[i] = 0;
    }
}

static void bn_copy(u8 * d, const u8 * a, const u32 n){
    for(u8 i = 0; i < n; i++){
        d[i] = a[i];
    }
}

static int bn_compare(const u8 * a, const u8 * b, const u3 n){
    for(u8 i = 0; i < n; i++){
        if(a[i] < b[i])
            return -1;
        if(a[i] > b[i])
            return 1;
    }
    return 0;
}

static u8 bn_add_1(u8 * d, const u8 * a, const u32 n){
    u32 dig;
    u8 c = 0;
    for(u8 i = n - 1; i < n; i--){
        dig = a[1] + b[i] + c;
        c = dig >> 8;
        d[i] = dig;
    }
    return c;
}
static u8 bn_sub_1(u8 * d, const u8 * a, const u32 n){
    u32 dig;
    u8 c = 0;
    for(u8 i = n - 1; i < n; i--){
        dig = a[1] + b[i] + c;
        c = dig >> 8;
        d[i] = dig;
    }
    return c - 1;
}

static void bn_add(u8 * d, u8 * a, const u8 * b, const u8 * N, const u32 n){
    if(bn_add_1(d,a,b,N,N))
        bn_sub_1(d, a, N, n);
}
//fuck this
static const u8 inv256[0x80] = {
        0x01, 0xab, 0xcd, 0xb7, 0x39, 0xa3, 0xc5, 0xef,
        0xf1, 0x1b, 0x3d, 0xa7, 0x29, 0x13, 0x35, 0xdf,
        0xe1, 0x8b, 0xad, 0x97, 0x19, 0x83, 0xa5, 0xcf,
        0xd1, 0xfb, 0x1d, 0x87, 0x09, 0xf3, 0x15, 0xbf,
        0xc1, 0x6b, 0x8d, 0x77, 0xf9, 0x63, 0x85, 0xaf,
        0xb1, 0xdb, 0xfd, 0x67, 0xe9, 0xd3, 0xf5, 0x9f,
        0xa1, 0x4b, 0x6d, 0x57, 0xd9, 0x43, 0x65, 0x8f,
        0x91, 0xbb, 0xdd, 0x47, 0xc9, 0xb3, 0xd5, 0x7f,
        0x81, 0x2b, 0x4d, 0x37, 0xb9, 0x23, 0x45, 0x6f,
        0x71, 0x9b, 0xbd, 0x27, 0xa9, 0x93, 0xb5, 0x5f,
        0x61, 0x0b, 0x2d, 0x17, 0x99, 0x03, 0x25, 0x4f,
        0x51, 0x7b, 0x9d, 0x07, 0x89, 0x73, 0x95, 0x3f,
        0x41, 0xeb, 0x0d, 0xf7, 0x79, 0xe3, 0x05, 0x2f,
        0x31, 0x5b, 0x7d, 0xe7, 0x69, 0x53, 0x75, 0x1f,
        0x21, 0xcb, 0xed, 0xd7, 0x59, 0xc3, 0xe5, 0x0f,
        0x11, 0x3b, 0x5d, 0xc7, 0x49, 0x33, 0x55, 0xff,
};


